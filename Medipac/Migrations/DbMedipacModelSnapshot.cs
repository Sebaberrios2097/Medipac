// <auto-generated />
using System;
using Medipac.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medipac.Migrations
{
    [DbContext(typeof(DbMedipac))]
    partial class DbMedipacModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Medipac.Models.AdmCarruselNoticias", b =>
                {
                    b.Property<int>("IdCarruselNoticias")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Carrusel_Noticias");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCarruselNoticias"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("IdNoticia")
                        .HasColumnType("int")
                        .HasColumnName("Id_Noticia");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subtitulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlImagen")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Url_Imagen");

                    b.HasKey("IdCarruselNoticias");

                    b.HasIndex("IdNoticia");

                    b.ToTable("ADM_Carrusel_Noticias");
                });

            modelBuilder.Entity("Medipac.Models.AdmNoticias", b =>
                {
                    b.Property<int>("IdNoticia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Noticia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNoticia"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Publicacion");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.Property<string>("Subtitulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Url_Imagen");

                    b.HasKey("IdNoticia");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ADM_Noticias");
                });

            modelBuilder.Entity("Medipac.Models.CliHistorialPaciente", b =>
                {
                    b.Property<int>("IdHistorialPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Historial_Paciente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistorialPaciente"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasComment("Columna que representa el borrado lógico del registro.");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Creacion");

                    b.Property<DateTime>("FechaHistorial")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Historial");

                    b.Property<string>("Historial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int")
                        .HasColumnName("Id_Medico");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_Paciente");

                    b.HasKey("IdHistorialPaciente");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.ToTable("CLI_Historial_Paciente");
                });

            modelBuilder.Entity("Medipac.Models.CliMedico", b =>
                {
                    b.Property<int>("IdMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Medico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedico"));

                    b.Property<string>("ApMaterno")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Ap_Materno");

                    b.Property<string>("ApPaterno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Ap_Paterno");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Dv")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasComment("Columna que representa el borrado lógico del registro.");

                    b.Property<string>("Fono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rut")
                        .HasColumnType("int");

                    b.HasKey("IdMedico");

                    b.HasIndex("IdUsuario");

                    b.ToTable("CLI_Medico");
                });

            modelBuilder.Entity("Medipac.Models.CliPacientes", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Paciente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<string>("ApMaterno")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Ap_Materno");

                    b.Property<string>("ApPaterno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Ap_Paterno");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasComment("Columna que representa el borrado lógico del registro.");

                    b.Property<string>("Fono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdPaciente");

                    b.HasIndex("IdUsuario");

                    b.ToTable("CLI_Pacientes");
                });

            modelBuilder.Entity("Medipac.Models.CliRecetaPaciente", b =>
                {
                    b.Property<int>("IdRecetaPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Receta_Paciente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRecetaPaciente"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasComment("Columna que representa el borrado lógico del registro.");

                    b.Property<int>("IdHistorialPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_Historial_Paciente");

                    b.Property<string>("Receta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdRecetaPaciente");

                    b.HasIndex("IdHistorialPaciente");

                    b.ToTable("CLI_Receta_Paciente");
                });

            modelBuilder.Entity("Medipac.Models.ComEstadosUsuario", b =>
                {
                    b.Property<int>("IdEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Estado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstado"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasComment("Columna que representa el borrado lógico del registro.");

                    b.HasKey("IdEstado");

                    b.ToTable("COM_Estados_Usuario");
                });

            modelBuilder.Entity("Medipac.Models.ComUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Creacion");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int")
                        .HasColumnName("Id_Estado");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Admin");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Medipac.Models.LogUsuario", b =>
                {
                    b.Property<int>("IdLogUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Log_Usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogUsuario"));

                    b.Property<bool>("Exitoso")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Creacion");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.HasKey("IdLogUsuario");

                    b.HasIndex("IdUsuario");

                    b.ToTable("LOG_Usuario");
                });

            modelBuilder.Entity("Medipac.Models.ResAgenda", b =>
                {
                    b.Property<int>("IdAgenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Agenda");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAgenda"));

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("HoraFin")
                        .HasColumnType("int")
                        .HasColumnName("Hora_FIn");

                    b.Property<int>("HoraInicio")
                        .HasColumnType("int")
                        .HasColumnName("Hora_Inicio");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int")
                        .HasColumnName("Id_Medico");

                    b.HasKey("IdAgenda");

                    b.HasIndex("IdMedico");

                    b.ToTable("RES_Agenda");
                });

            modelBuilder.Entity("Medipac.Models.ResEspecialidades", b =>
                {
                    b.Property<int>("IdEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Especialidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEspecialidad"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasComment("Columna que representa el borrado lógico del registro.");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdEspecialidad");

                    b.ToTable("RES_Especialidades");
                });

            modelBuilder.Entity("Medipac.Models.ResMedicoEspecialidad", b =>
                {
                    b.Property<int>("IdMedicoEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Medico_Especialidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedicoEspecialidad"));

                    b.Property<int>("IdEspecialidad")
                        .HasColumnType("int")
                        .HasColumnName("Id_Especialidad");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int")
                        .HasColumnName("Id_Medico");

                    b.HasKey("IdMedicoEspecialidad");

                    b.HasIndex("IdEspecialidad");

                    b.HasIndex("IdMedico");

                    b.ToTable("RES_Medico_Especialidad");
                });

            modelBuilder.Entity("Medipac.Models.ResReserva", b =>
                {
                    b.Property<int>("IdReserva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Reserva");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReserva"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasComment("Columna que representa el borrado lógico del registro.");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Creacion");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int")
                        .HasColumnName("Id_Medico");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_Paciente");

                    b.HasKey("IdReserva");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.ToTable("RES_Reserva");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Medipac.Models.AdmCarruselNoticias", b =>
                {
                    b.HasOne("Medipac.Models.AdmNoticias", "IdNoticiaNavigation")
                        .WithMany("AdmCarruselNoticias")
                        .HasForeignKey("IdNoticia")
                        .IsRequired()
                        .HasConstraintName("FK_ADM_Carrusel_Noticias_ADM_Noticias");

                    b.Navigation("IdNoticiaNavigation");
                });

            modelBuilder.Entity("Medipac.Models.AdmNoticias", b =>
                {
                    b.HasOne("Medipac.Models.ComUsuario", "IdUsuarioNavigation")
                        .WithMany("AdmNoticias")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_ADM_Noticias_COM_Usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Medipac.Models.CliHistorialPaciente", b =>
                {
                    b.HasOne("Medipac.Models.CliMedico", "IdMedicoNavigation")
                        .WithMany("CliHistorialPaciente")
                        .HasForeignKey("IdMedico")
                        .IsRequired()
                        .HasConstraintName("FK_CLI_Historial_Paciente_CLI_Medico");

                    b.HasOne("Medipac.Models.CliPacientes", "IdPacienteNavigation")
                        .WithMany("CliHistorialPaciente")
                        .HasForeignKey("IdPaciente")
                        .IsRequired()
                        .HasConstraintName("FK_CLI_Historial_Paciente_CLI_Pacientes");

                    b.Navigation("IdMedicoNavigation");

                    b.Navigation("IdPacienteNavigation");
                });

            modelBuilder.Entity("Medipac.Models.CliMedico", b =>
                {
                    b.HasOne("Medipac.Models.ComUsuario", "IdUsuarioNavigation")
                        .WithMany("CliMedico")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_CLI_Medico_COM_Usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Medipac.Models.CliPacientes", b =>
                {
                    b.HasOne("Medipac.Models.ComUsuario", "IdUsuarioNavigation")
                        .WithMany("CliPacientes")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_CLI_Pacientes_COM_Usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Medipac.Models.CliRecetaPaciente", b =>
                {
                    b.HasOne("Medipac.Models.CliHistorialPaciente", "IdHistorialPacienteNavigation")
                        .WithMany("CliRecetaPaciente")
                        .HasForeignKey("IdHistorialPaciente")
                        .IsRequired()
                        .HasConstraintName("FK_CLI_Receta_Paciente_CLI_Historial_Paciente");

                    b.Navigation("IdHistorialPacienteNavigation");
                });

            modelBuilder.Entity("Medipac.Models.ComUsuario", b =>
                {
                    b.HasOne("Medipac.Models.ComEstadosUsuario", "IdEstadoNavigation")
                        .WithMany("ComUsuario")
                        .HasForeignKey("IdEstado")
                        .IsRequired()
                        .HasConstraintName("FK_COM_Usuario_COM_Estados_Usuario");

                    b.Navigation("IdEstadoNavigation");
                });

            modelBuilder.Entity("Medipac.Models.LogUsuario", b =>
                {
                    b.HasOne("Medipac.Models.ComUsuario", "IdUsuarioNavigation")
                        .WithMany("LogUsuario")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_LOG_Usuario_COM_Usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Medipac.Models.ResAgenda", b =>
                {
                    b.HasOne("Medipac.Models.CliMedico", "IdMedicoNavigation")
                        .WithMany("ResAgenda")
                        .HasForeignKey("IdMedico")
                        .IsRequired()
                        .HasConstraintName("FK_RES_Agenda_CLI_Medico");

                    b.Navigation("IdMedicoNavigation");
                });

            modelBuilder.Entity("Medipac.Models.ResMedicoEspecialidad", b =>
                {
                    b.HasOne("Medipac.Models.ResEspecialidades", "IdEspecialidadNavigation")
                        .WithMany("ResMedicoEspecialidad")
                        .HasForeignKey("IdEspecialidad")
                        .IsRequired()
                        .HasConstraintName("FK_RES_Medico_Especialidad_RES_Especialidades");

                    b.HasOne("Medipac.Models.CliMedico", "IdMedicoNavigation")
                        .WithMany("ResMedicoEspecialidad")
                        .HasForeignKey("IdMedico")
                        .IsRequired()
                        .HasConstraintName("FK_RES_Medico_Especialidad_CLI_Medico");

                    b.Navigation("IdEspecialidadNavigation");

                    b.Navigation("IdMedicoNavigation");
                });

            modelBuilder.Entity("Medipac.Models.ResReserva", b =>
                {
                    b.HasOne("Medipac.Models.CliMedico", "IdMedicoNavigation")
                        .WithMany("ResReserva")
                        .HasForeignKey("IdMedico")
                        .IsRequired()
                        .HasConstraintName("FK_RES_Reserva_CLI_Medico");

                    b.HasOne("Medipac.Models.CliPacientes", "IdPacienteNavigation")
                        .WithMany("ResReserva")
                        .HasForeignKey("IdPaciente")
                        .IsRequired()
                        .HasConstraintName("FK_RES_Reserva_CLI_Pacientes");

                    b.Navigation("IdMedicoNavigation");

                    b.Navigation("IdPacienteNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Medipac.Models.ComUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Medipac.Models.ComUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medipac.Models.ComUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Medipac.Models.ComUsuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medipac.Models.AdmNoticias", b =>
                {
                    b.Navigation("AdmCarruselNoticias");
                });

            modelBuilder.Entity("Medipac.Models.CliHistorialPaciente", b =>
                {
                    b.Navigation("CliRecetaPaciente");
                });

            modelBuilder.Entity("Medipac.Models.CliMedico", b =>
                {
                    b.Navigation("CliHistorialPaciente");

                    b.Navigation("ResAgenda");

                    b.Navigation("ResMedicoEspecialidad");

                    b.Navigation("ResReserva");
                });

            modelBuilder.Entity("Medipac.Models.CliPacientes", b =>
                {
                    b.Navigation("CliHistorialPaciente");

                    b.Navigation("ResReserva");
                });

            modelBuilder.Entity("Medipac.Models.ComEstadosUsuario", b =>
                {
                    b.Navigation("ComUsuario");
                });

            modelBuilder.Entity("Medipac.Models.ComUsuario", b =>
                {
                    b.Navigation("AdmNoticias");

                    b.Navigation("CliMedico");

                    b.Navigation("CliPacientes");

                    b.Navigation("LogUsuario");
                });

            modelBuilder.Entity("Medipac.Models.ResEspecialidades", b =>
                {
                    b.Navigation("ResMedicoEspecialidad");
                });
#pragma warning restore 612, 618
        }
    }
}
